import {CodeHelper} from '../../../helpers/CodeHelper';
import {TextHelper} from '../../../helpers/TextHelper';
import {IProps, IState, DefaultProps, DefaultState, Base} from '../Base';
import {FullStackBlend, DeclarationHelper} from '../../../helpers/DeclarationHelper';
import {BackEndScriptHelper, CONTROLLER_DEFAULTS, CONNECTOR_DEFAULTS, WORKER_DEFAULTS, SCHEDULER_DEFAULTS, TemplateCode} from '../../../helpers/BackEndScriptHelper';
import {CAMEL_OF_EVENTS_DICTIONARY, FORM_CONTROL_CLASS_LIST} from '../../../Constants';

declare let React: any;
declare let ReactDOM: any;
declare let perform: any;
declare let ace: any;

interface Props extends IProps {
}

interface State extends IState {
   value: string,
   defaults: any
}

let ExtendedDefaultProps = Object.assign({}, DefaultProps);
let keys = [...Object.keys(CAMEL_OF_EVENTS_DICTIONARY)];
let watchingAttributeNames = [];
for (let name of keys) {
	watchingAttributeNames.push(name);
	watchingAttributeNames.push('internal-fsb-react-code-' + name);
}
watchingAttributeNames.push('internal-fsb-data-source-type');
watchingAttributeNames.push('internal-fsb-data-source-name');
watchingAttributeNames.push('internal-fsb-data-source-column');
watchingAttributeNames.push('internal-fsb-data-validation-message');
watchingAttributeNames.push('internal-fsb-data-validation-format');
watchingAttributeNames.push('internal-fsb-data-validation-regex');
watchingAttributeNames.push('internal-fsb-data-wizard-cross-operation');
watchingAttributeNames.push('internal-fsb-data-value-source');
watchingAttributeNames.push('internal-fsb-data-session-name');
watchingAttributeNames.push('internal-fsb-name');
watchingAttributeNames.push('internal-fsb-class');
watchingAttributeNames.push('internal-fsb-guid');
watchingAttributeNames.push('required');
watchingAttributeNames.push('internal-fsb-data-code');
watchingAttributeNames.push('internal-fsb-data-code-import');
watchingAttributeNames.push('internal-fsb-data-code-declare');
watchingAttributeNames.push('internal-fsb-data-code-interface');
watchingAttributeNames.push('internal-fsb-data-code-body');
watchingAttributeNames.push('internal-fsb-data-code-footer');
watchingAttributeNames.push('data-source-group-name');
watchingAttributeNames.push('data-target-group-name');
watchingAttributeNames.push('data-title-name');
watchingAttributeNames.push('data-timing-day-monday');
watchingAttributeNames.push('data-timing-day-tuesday');
watchingAttributeNames.push('data-timing-day-wednesday');
watchingAttributeNames.push('data-timing-day-thursday');
watchingAttributeNames.push('data-timing-day-friday');
watchingAttributeNames.push('data-timing-day-saturday');
watchingAttributeNames.push('data-timing-day-sunday');
watchingAttributeNames.push('data-timing-minutes');

let watchingExtensionNames = [];
watchingExtensionNames.push('pages');
watchingExtensionNames.push('editingPageID');
watchingExtensionNames.push('editing');
watchingExtensionNames.push('isInputElement');
watchingExtensionNames.push('autoGeneratedCodeForMergingBackEndScript');
watchingExtensionNames.push('internal-fsb-data-code-import');
watchingExtensionNames.push('internal-fsb-data-code-declare');
watchingExtensionNames.push('internal-fsb-data-code-interface');
watchingExtensionNames.push('internal-fsb-data-code-body');
watchingExtensionNames.push('internal-fsb-data-code-footer');

Object.assign(ExtendedDefaultProps, {
  watchingAttributeNames: watchingAttributeNames,
  watchingExtensionNames: watchingExtensionNames
});

class BackEndScriptEditor extends Base<Props, State> {
    protected static defaultProps: Props = ExtendedDefaultProps;

    constructor(props) {
        super(props);
        
        this.state = CodeHelper.clone(Object.assign({}, DefaultState, {
            value: ''
        }));
        
        window.define = ace.define;
        window.require = ace.require;
        
        ace.config.set('basePath', 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.6/');
    }
    
    functionNameMapping: any = {}
    
    public update(properties: any) {
        if (!super.update(properties)) return;
        if (properties.tag == 'user-action') return;
        
        this.state.defaults = CONTROLLER_DEFAULTS;
        
        let code, mapping;
        if (['site'].indexOf(this.state.extensionValues['editing']) != -1) {
	        if (FORM_CONTROL_CLASS_LIST.indexOf(this.state.attributeValues['internal-fsb-class']) == -1) {
	            let info = this.state.extensionValues;
	            info['internal-fsb-data-code'] = this.state.attributeValues['internal-fsb-data-code'];
	            
	            let pages = this.state.extensionValues['pages'];
				      let editingPageID = this.state.extensionValues['editingPageID'];
				      pages = pages.filter(page => page.id == editingPageID);
					    
					    let path = pages && pages[0] && pages[0].path || '';
					    path = path.split(':')[0].replace(/(^\/|\/$)/g, '');
							
							info['editingPagePath'] = (path) ? path + '/' : '';
	            
	            [code, mapping] = BackEndScriptHelper.generateScriptCode(info);
	        } else {
	            let info = this.state.attributeValues;
	            
	        		[code, mapping] = BackEndScriptHelper.generateMergingCode(info);
	        }
	        this.functionNameMapping = mapping;
	        
	        if (code) {
	        	code = TextHelper.removeMultipleBlankLines(code);
	        }
	      } else if (['components', 'popups'].indexOf(this.state.extensionValues['editing']) != -1 && this.state.extensionValues['isInputElement']) {
	      	let info = this.state.attributeValues;
	            
	        [code, mapping] = BackEndScriptHelper.generateMergingCode(info);
	        
	        this.functionNameMapping = mapping;
	        
	        if (code) {
	        	code = TextHelper.removeMultipleBlankLines(code);
	        }
	      } else if (['data'].indexOf(this.state.extensionValues['editing']) != -1) {
	      	if (['Connection'].indexOf(this.state.attributeValues['internal-fsb-class']) != -1) {
	        	this.state.defaults = CONNECTOR_DEFAULTS;
	        	
	      		let info = this.state.attributeValues;
	      		if (info['data-title-name'] == 'Untitled') info['data-title-name'] = '';
	      		
	      		info['editingPagePath'] = '';
	      		info['editingPageID'] = info['data-title-name'] || info['internal-fsb-guid'];
	      		info['autoGeneratedCodeForMergingBackEndScript'] = this.state.extensionValues['autoGeneratedCodeForMergingBackEndScript'];
	      		
	      		[code, mapping] = BackEndScriptHelper.generateConnectorCode(info);
	      		
	        	this.functionNameMapping = mapping;
		        
		        if (code) {
		        	code = TextHelper.removeMultipleBlankLines(code);
		        }
	      	} else if (['Queue'].indexOf(this.state.attributeValues['internal-fsb-class']) != -1) {
	        	this.state.defaults = WORKER_DEFAULTS;
	        	
	      		let info = this.state.attributeValues;
	      		if (info['data-title-name'] == 'Untitled') info['data-title-name'] = '';
	      		
	      		info['editingPagePath'] = '';
	      		info['editingPageID'] = info['data-title-name'] || info['internal-fsb-guid'];
	      		info['autoGeneratedCodeForMergingBackEndScript'] = this.state.extensionValues['autoGeneratedCodeForMergingBackEndScript'];
	      		
	      		[code, mapping] = BackEndScriptHelper.generateWorkerCode(info);
	      		
	        	this.functionNameMapping = mapping;
		        
		        if (code) {
		        	code = TextHelper.removeMultipleBlankLines(code);
		        }
	      	} else if (['Scheduler'].indexOf(this.state.attributeValues['internal-fsb-class']) != -1) {
	        	this.state.defaults = SCHEDULER_DEFAULTS;
	        	
	      		let info = this.state.attributeValues;
	      		if (info['data-title-name'] == 'Untitled') info['data-title-name'] = '';
	      		
	      		info['editingPagePath'] = '';
	      		info['editingPageID'] = info['data-title-name'] || info['internal-fsb-guid'];
	      		info['autoGeneratedCodeForMergingBackEndScript'] = this.state.extensionValues['autoGeneratedCodeForMergingBackEndScript'];
	      		
	      		[code, mapping] = BackEndScriptHelper.generateSchedulerCode(info);
	      		
	        	this.functionNameMapping = mapping;
		        
		        if (code) {
		        	code = TextHelper.removeMultipleBlankLines(code);
		        }
	      	} else if (['Parameter', 'Timing'].indexOf(this.state.attributeValues['internal-fsb-class']) != -1) {
	        	this.state.defaults = SCHEDULER_DEFAULTS;
	        	
	      		let info = this.state.attributeValues;
	          
	        	[code, mapping] = BackEndScriptHelper.generateMergingCode(info, [], false,
	        		(this.state.attributeValues['internal-fsb-class'] == 'Parameter') ? TemplateCode.Worker : TemplateCode.Scheduler);
	      		
	        	this.functionNameMapping = mapping;
	      	} else {
	      		code = '';
	      	}
	      } else {
	      	code = '';
	      }
        
        if (this.state.value !== code) {
            this.state.value = code;
          
            let editor = ace.edit("backEndEditor");
            editor.setValue(code);
            editor.clearSelection();
            
            this.forceUpdate();
        }
    }
    
    private onLoad() {
        let editor = ace.edit("backEndEditor");
        
        let beginRegEx = /Auto\[[0-9a-zA-Z\:_]+\]--->/;
        let endRegEx = /<---Auto\[[0-9a-zA-Z\:_]+\]/;
        
        editor.on("changeSelection", (function(e) {
        		let lines = this.state.value.split('\n');
        	
        		function checkAndPreventedFromEditing(rowCol) {
                let isPreventedFromEditing = false;
                
                for (let i = rowCol.row; i >= 0; i--) {
                	if (i >= lines.length) break;
                  if (lines[i].match(endRegEx) != null) break;
                  if (lines[i].match(beginRegEx) != null) {
                    isPreventedFromEditing = true;
                    break;
                  }
                }
                for (let i = rowCol.row; i < editor.session.getLength(); i++) {
                	if (i >= lines.length) break;
                  if (lines[i].match(beginRegEx) != null) break;
                  if (lines[i].match(endRegEx) != null) {
                    isPreventedFromEditing = true;
                    break;
                  }
                }
                
                return isPreventedFromEditing;
            }
                
        		let getRange = editor.selection.getRange();
            editor.setReadOnly(
            	checkAndPreventedFromEditing(getRange.start) ||
            	checkAndPreventedFromEditing(getRange.end)
            );
        }).bind(this));
        
        editor.renderer.on('afterRender', (function() {
            let lines = this.state.value.split('\n');
            let aceLines = [...document.getElementById('backEndEditor').getElementsByClassName('ace_line_group')];
            let offset = editor.getFirstVisibleRow();
            
            for (let j=0; j<aceLines.length; j++) {
                let readonly = false;
              
                for (let i = offset + j; i >= 0; i--) {
                		if (i >= lines.length) break;
                    if (lines[i].match(endRegEx) != null) break;
                    if (lines[i].match(beginRegEx) != null) {
                        readonly = true;
                        break;
                    }
                }
                for (let i = offset + j; i < offset + aceLines.length; i++) {
                		if (i >= lines.length) break;
                    if (lines[i].match(beginRegEx) != null) break;
                    if (lines[i].match(endRegEx) != null) {
                        readonly = true;
                        break;
                    }
                }
                
                if (aceLines[j]) {
                    aceLines[j].style.opacity = (readonly) ? 0.25 : 1.0;
                }
            }
        }).bind(this));
        
        editor.session.setUseWrapMode(true);
    }
    private onChange(value) {
        let editor = ace.edit("backEndEditor");
        if (!editor.curOp || !editor.curOp.command.name) return;
      
        this.state.value = value;
      
        if (value) {
            let extractedInfo = BackEndScriptHelper.extractCode(value);
            let defaultDict = {
            		Import: "internal-fsb-data-code-import",
            		Declare: "internal-fsb-data-code-declare",
            		Interface: "internal-fsb-data-code-interface",
            		ClassBegin: "internal-fsb-data-code-body",
            		ClassEnd: "internal-fsb-data-code-footer"
            };
            
            let willUpdateExtensions = [];
            let willUpdateAttributes = [];
            
            for (let key in extractedInfo) {
            		if (extractedInfo.hasOwnProperty(key)) {
            				if (['data'].indexOf(this.state.extensionValues['editing']) == -1) {
            					if (defaultDict[key]) {
	            						if (extractedInfo[key] != this.state.defaults[key] && this.state.extensionValues[defaultDict[key]] != extractedInfo[key]) {
	            								willUpdateExtensions.push({
	            										name: defaultDict[key],
	            										value: extractedInfo[key]
	            								});
	            						}
	            				} else if (this.functionNameMapping[key]) {
	            						if (this.state.attributeValues[this.functionNameMapping[key]] != extractedInfo[key]) {
	            								willUpdateAttributes.push({
	            										name: this.functionNameMapping[key],
	            										value: extractedInfo[key]
	            								});
	            						}
	            				}
            				} else {
	            				if (defaultDict[key]) {
	            						if (extractedInfo[key] != this.state.defaults[key] && this.state.attributeValues[defaultDict[key]] != extractedInfo[key]) {
	            								willUpdateAttributes.push({
	            										name: defaultDict[key],
	            										value: extractedInfo[key]
	            								});
	            						}
	            				} else if (this.functionNameMapping[key]) {
	            						if (this.state.attributeValues[this.functionNameMapping[key]] != extractedInfo[key]) {
	            								willUpdateAttributes.push({
	            										name: this.functionNameMapping[key],
	            										value: extractedInfo[key]
	            								});
	            						}
	            				}
	            			}
            		}
            }
            
            if (willUpdateExtensions.length != 0 || willUpdateAttributes.length != 0) {
		            perform('update', {
		            		attributes: willUpdateAttributes,
		            		extensions: willUpdateExtensions,
		                replace: (willUpdateExtensions.length != 1) ? null : willUpdateExtensions[0].name + '+text',
		                tag: 'user-action'
		            });
		        }
        }
    }
    
    render() {
      return (
      	<div>
      		<div style={{display: (this.state.value == '') ? 'none' : 'block'}}>
			  		<ReactAce.default style={{position: 'absolute', width: '100%', height: '100%'}}
			          name="backEndEditor"
			          mode="typescript"
			          theme="tomorrow"
			          onLoad={this.onLoad.bind(this)}
			          onChange={this.onChange.bind(this)}
			          value={this.state.value}
			          fontSize={12}
			          showPrintMargin={false}
			          showGutter={true}
			          highlightActiveLine={true}
			          setOptions={{
			            useWorker: true,
			            showLineNumbers: true,
			            tabSize: 2
			         }}
			  		/>
			  	</div>
			  	<div className="text-center" style={{display: (this.state.value == '') ? 'block' : 'none'}}>
			  		<i className="fa fa-object-group" style={{fontSize: '50px', color: '#f0f0f0', paddingTop: '85px'}} />
			  	</div>
	      </div>
      )
    }
}

DeclarationHelper.declare('Components.BackEndScriptEditor', BackEndScriptEditor);

export {Props, State, BackEndScriptEditor};